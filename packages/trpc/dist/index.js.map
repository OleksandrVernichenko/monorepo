{"version":3,"sources":["../src/context/index.ts","../src/routes/example.ts","../src/utils/trpc.ts","../src/lib/test.ts","../src/db/config.ts","../src/db/schema.ts","../src/root.ts"],"sourcesContent":["import type { inferAsyncReturnType } from \"@trpc/server\";\nimport type { CreateFastifyContextOptions } from \"@trpc/server/adapters/fastify\";\n\nexport function createContext({ req, res }: CreateFastifyContextOptions) {\n  return {\n    req,\n    res,\n  };\n}\n\nexport type Context = inferAsyncReturnType<typeof createContext>;\n","import { z } from \"zod\";\n\nimport { publicProcedure, router } from \"../utils/trpc\";\nimport getAllData from \"@/lib/test\";\n\nexport const exampleRouter = router({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n  getData: publicProcedure.query(async () => {\n    const data = await getAllData();\n    return data;\n  }),\n});\n","import { initTRPC } from \"@trpc/server\";\n\nconst t = initTRPC.create();\n\nexport const router = t.router;\nexport const middleware = t.middleware;\nexport const publicProcedure = t.procedure;\n","import { connect } from \"@planetscale/database\";\nimport { config } from \"../db/config\";\nimport { drizzle } from \"drizzle-orm/planetscale-serverless\";\nimport { quotes, authors, categories } from \"@/db/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport default async function getAllData() {\n  const conn = connect(config);\n  const db = drizzle(conn);\n\n  const res = await db\n    .select({\n      quotes: quotes.quote,\n      author: authors.author,\n      category: categories.category,\n    })\n    .from(quotes)\n    .innerJoin(authors, eq(quotes.authorId, authors.id))\n    .innerJoin(categories, eq(quotes.categoryId, categories.id));\n\n  return res;\n}\n","import dotenv from \"dotenv\";\ndotenv.config({ path: \".env\" });\n\nexport const config = {\n  host: process.env.DATABASE_HOST,\n  username: process.env.DATABASE_USERNAME,\n  password: process.env.DATABASE_PASSWORD,\n};\n","import {\n  mysqlTable,\n  mysqlSchema,\n  AnyMySqlColumn,\n  unique,\n  int,\n  varchar,\n  index,\n} from \"drizzle-orm/mysql-core\";\nimport { sql } from \"drizzle-orm\";\n\nexport const authors: AnyMySqlColumn = mysqlTable(\n  \"authors\",\n  {\n    id: int(\"id\").autoincrement().primaryKey().notNull(),\n    author: varchar(\"author\", { length: 255 }).notNull(),\n  },\n  (table) => {\n    return {\n      author: unique(\"author\").on(table.author),\n    };\n  }\n);\n\nexport const categories: AnyMySqlColumn = mysqlTable(\n  \"categories\",\n  {\n    id: int(\"id\").autoincrement().primaryKey().notNull(),\n    category: varchar(\"category\", { length: 255 }).notNull(),\n  },\n  (table) => {\n    return {\n      category: unique(\"category\").on(table.category),\n    };\n  }\n);\n\nexport const quotes: AnyMySqlColumn = mysqlTable(\n  \"quotes\",\n  {\n    id: int(\"id\").autoincrement().primaryKey().notNull(),\n    quote: varchar(\"quote\", { length: 255 }).notNull(),\n    authorId: int(\"author_id\").notNull(),\n    categoryId: int(\"category_id\").notNull(),\n  },\n  (table) => {\n    return {\n      authorIdIdx: index(\"author_id_idx\").on(table.authorId),\n      categoryIdIdx: index(\"category_id_idx\").on(table.categoryId),\n      quote: unique(\"quote\").on(table.quote),\n    };\n  }\n);\n","import { exampleRouter } from \"./routes/example\";\nimport { router } from \"./utils/trpc\";\n\nexport const appRouter = router({\n  example: exampleRouter,\n});\n\nexport type AppRouter = typeof appRouter;\n"],"mappings":"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","names":[]}